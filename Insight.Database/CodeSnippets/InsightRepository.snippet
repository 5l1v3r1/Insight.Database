<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>InsightRepository</Title>
      <Author>jonw</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>insightrepo</Shortcut>
    </Header>
    <Snippet>
      <References>
        <Reference>
          <Assembly>System.Data</Assembly>
        </Reference>
      </References>
      <Imports>
        <Import>
          <Namespace>System.Data.dll</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>typeparameter</ID>
          <ToolTip>typeparameter</ToolTip>
          <Default>o</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>repository</ID>
          <ToolTip>The name of the repository interface</ToolTip>
          <Default>Repository</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>type</ID>
          <ToolTip>The type of object to store in the repository</ToolTip>
          <Default>object</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>idname</ID>
          <ToolTip>The name of the ID field</ToolTip>
          <Default>id</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>idtype</ID>
          <ToolTip>The type of the IDfield</ToolTip>
          <Default>int</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>typeparam</ID>
          <ToolTip>typeparam</ToolTip>
          <Default>typeparam</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[	
	/// <summary>
	/// Defines a repository interface.
	/// </summary>
	/// <remarks>Generated by InsightRepository.snippet. Extend this with methods in a separate partial interface.</remarks>
    partial interface I$repository$
	{
        #region Sync CRUD Methods
		/// <summary>
		/// Selects a single $type$ from the repository by identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		/// <returns>The selected $type$.</returns>
		$type$ Select$type$($idtype$ $idname$);

		/// <summary>
		/// Inserts a single $type$ into the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		void Insert$type$($type$ $typeparameter$);

		/// <summary>
		/// Updates a single $type$ in the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		void Update$type$($type$ $typeparameter$);

		/// <summary>
		/// Deletes a $type$ in the repository matching the given identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		void Delete$type$($idtype$ $idname$);
        #endregion

        #region Async CRUD Methods
		/// <summary>
		/// Asynchronously selects a single $type$ from the repository by identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		/// <returns>A task returning the selected $type$.</returns>
		Task<$type$> Select$type$Async($idtype$ $idname$);

		/// <summary>
		/// Asynchronously Inserts a single $type$ into the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		Task Insert$type$Async($type$ $typeparameter$);

		/// <summary>
		/// Asynchronously updates a single $type$ in the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		Task Update$type$Async($type$ $typeparameter$);

		/// <summary>
		/// Asynchronously deletes a $type$ in the repository matching the given identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		Task Delete$type$Async($idtype$ $idname$);
        #endregion
	}

	/// <summary>
	/// Implements a repository interface.
	/// </summary>
	/// <remarks>Generated by InsightRepository.snippet. Extend this with methods in a separate partial interface.</remarks>
	partial class $repository$ : I$repository$
	{
		/// <summary>
		/// The factory function used to generate a new connection 
		/// for the repository when it needs to perform a database operation.
		/// </summary>
		private Func<System.Data.IDbConnection> _connectionFactory;

        #region Constructors
		/// <summary>
		/// Initializes a new instance of the $repository$ class.
		/// </summary>
		/// <param name="connectionFactory">
		/// A factory function that generates a new connection 
		/// for the repository when it needs to perform a database operation.
		/// </param>
		public $type$Repository(Func<System.Data.IDbConnection> connectionFactory)
		{
			_connectionFactory = connectionFactory;
		}
        #endregion

        #region Sync CRUD Methods
		/// <summary>
		/// Selects a single $type$ from the repository by identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		/// <returns>The selected $type$.</returns>
		public $type$ Select$type$($idtype$ $idname$)
		{
			return _connectionFactory().Query<$type$>("Select$type$", new { $idname$ = $idname$ }).FirstOrDefault();
		}

		/// <summary>
		/// Inserts a single $type$ into the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		public void Insert$type$($type$ $typeparameter$)
		{
			_connectionFactory().Insert("Insert$type$", $typeparameter$);
		}

		/// <summary>
		/// Updates a single $type$ in the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		public void Update$type$($type$ $typeparameter$)
		{
			_connectionFactory().Execute("Update$type$", $typeparameter$);
		}

		/// <summary>
		/// Deletes a $type$ in the repository matching the given identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		public void Delete$type$($idtype$ $idname$)
		{
			_connectionFactory().Execute("Delete$type$", new { $idname$ = $idname$ });
		}
        #endregion

        #region Async CRUD Methods
		/// <summary>
		/// Asynchronously selects a single $type$ from the repository by identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		/// <returns>A task returning the selected $type$.</returns>
		public Task<$type$> Select$type$Async($idtype$ $idname$)
		{
			return _connectionFactory().QueryAsync<$type$>("Select$type$", new { $idname$ = $idname$ }).ContinueWith(t => t.Result.FirstOrDefault());
		}

		/// <summary>
		/// Asynchronously Inserts a single $type$ into the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		public Task Insert$type$Async($type$ $typeparameter$)
		{
			return _connectionFactory().InsertAsync("Insert$type$", $typeparameter$);
		}

		/// <summary>
		/// Asynchronously updates a single $type$ in the repository.
		/// </summary>
		/// <param name="$typeparameter$">The $type$ to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		public Task Update$type$Async($type$ $typeparameter$)
		{
			return _connectionFactory().ExecuteAsync("Update$type$", $typeparameter$);
		}

		/// <summary>
		/// Asynchronously deletes a $type$ in the repository matching the given identifier.
		/// </summary>
		/// <param name="$idname$">The $idname$ of the $type$.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		public Task Delete$type$Async($idtype$ $idname$)
		{
			return _connectionFactory().ExecuteAsync("Delete$type$", new { $idname$ = $idname$ });
		}
        #endregion
	}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>