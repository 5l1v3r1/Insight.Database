using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Data;
using Insight.Database;
using Insight.Tests.TestDataClasses;
using System.Data.Common;

#pragma warning disable 0649

namespace Insight.Tests
{
	/// <summary>
	/// Tests the various methods of opening connections.
	/// </summary>
	[TestFixture]
	public class OpenTests
	{
		#region Setup
		protected SqlConnectionStringBuilder _connectionStringBuilder;

		[TestFixtureSetUp]
		public virtual void SetUpFixture()
		{
			// open the test connection
			_connectionStringBuilder = new SqlConnectionStringBuilder();
			_connectionStringBuilder.IntegratedSecurity = true;
			_connectionStringBuilder.AsynchronousProcessing = true;
		}
		#endregion

		[Test]
		public void Open()
		{
			TestConnection(() => _connectionStringBuilder.Open());
			TestConnection(() => _connectionStringBuilder.OpenAsync().Result);
			TestConnection(() => _connectionStringBuilder.OpenAs<ITest1>());
			TestConnection(() => _connectionStringBuilder.OpenAsAsync<ITest1>().Result);
			TestConnection(() => _connectionStringBuilder.OpenWithTransaction(), true);
			TestConnection(() => _connectionStringBuilder.OpenWithTransactionAsync().Result, true);
			TestConnection(() => _connectionStringBuilder.OpenWithTransactionAs<ITest1>(), true);
			TestConnection(() => _connectionStringBuilder.OpenWithTransactionAsAsync<ITest1>().Result, true);
		}

		private void TestConnection<T>(Func<T> opener, bool checkTransaction = false) where T : IDisposable, IDbConnection
		{
			using (var c = opener())
			{
				AssertConnection(c);
				Assert.IsInstanceOf<T>(c);

				if (checkTransaction)
				{
					DbConnectionWrapper wrapper = (DbConnectionWrapper)(object)c;
					Assert.IsNotNull(wrapper.InnerTransaction);
				}
			}
		}

		private void AssertConnection(IDbConnection c)
		{
			Assert.IsNotNull(c);
			Assert.IsInstanceOf<IDbConnection>(c);
			Assert.AreEqual(ConnectionState.Open, c.State);
		}
	}
}
