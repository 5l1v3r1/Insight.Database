using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Insight.Database.Sample
{
	/// <summary>
	/// Defines a repository interface.
	/// </summary>
	/// <remarks>Generated by InsightRepository.snippet. Extend this with methods in a separate partial interface.</remarks>
    partial interface IBeerRepository
	{
        #region Sync CRUD Methods
		/// <summary>
		/// Selects a single Beer from the repository by identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		/// <returns>The selected Beer.</returns>
		Beer SelectBeer(int id);

		/// <summary>
		/// Inserts a single Beer into the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		void InsertBeer(Beer beer);

		/// <summary>
		/// Updates a single Beer in the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		void UpdateBeer(Beer beer);

		/// <summary>
		/// Deletes a Beer in the repository matching the given identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		void DeleteBeer(int id);
        #endregion

        #region Async CRUD Methods
		/// <summary>
		/// Asynchronously selects a single Beer from the repository by identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		/// <returns>A task returning the selected Beer.</returns>
		Task<Beer> SelectBeerAsync(int id);

		/// <summary>
		/// Asynchronously Inserts a single Beer into the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		Task InsertBeerAsync(Beer beer);

		/// <summary>
		/// Asynchronously updates a single Beer in the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		Task UpdateBeerAsync(Beer beer);

		/// <summary>
		/// Asynchronously deletes a Beer in the repository matching the given identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		Task DeleteBeerAsync(int id);
        #endregion
	}

	/// <summary>
	/// Implements a repository interface.
	/// </summary>
	/// <remarks>Generated by InsightRepository.snippet. Extend this with methods in a separate partial interface.</remarks>
	partial class BeerRepository : IBeerRepository
	{
		/// <summary>
		/// The factory function used to generate a new connection 
		/// for the repository when it needs to perform a database operation.
		/// </summary>
		private Func<System.Data.IDbConnection> _connectionFactory;

        #region Constructors
		/// <summary>
		/// Initializes a new instance of the BeerRepository class.
		/// </summary>
		/// <param name="connectionFactory">
		/// A factory function that generates a new connection 
		/// for the repository when it needs to perform a database operation.
		/// </param>
		public BeerRepository(Func<System.Data.IDbConnection> connectionFactory)
		{
			_connectionFactory = connectionFactory;
		}
        #endregion

        #region Sync CRUD Methods
		/// <summary>
		/// Selects a single Beer from the repository by identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		/// <returns>The selected Beer.</returns>
		public Beer SelectBeer(int id)
		{
			return _connectionFactory().Query<Beer>("SelectBeer", new { id = id }).FirstOrDefault();
		}

		/// <summary>
		/// Inserts a single Beer into the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		public void InsertBeer(Beer beer)
		{
			_connectionFactory().Insert("InsertBeer", beer);
		}

		/// <summary>
		/// Updates a single Beer in the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		public void UpdateBeer(Beer beer)
		{
			_connectionFactory().Execute("UpdateBeer", beer);
		}

		/// <summary>
		/// Deletes a Beer in the repository matching the given identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		public void DeleteBeer(int id)
		{
			_connectionFactory().Execute("DeleteBeer", new { id = id });
		}
        #endregion

        #region Async CRUD Methods
		/// <summary>
		/// Asynchronously selects a single Beer from the repository by identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		/// <returns>A task returning the selected Beer.</returns>
		public Task<Beer> SelectBeerAsync(int id)
		{
			return _connectionFactory().QueryAsync<Beer>("SelectBeer", new { id = id }).ContinueWith(t => t.Result.FirstOrDefault());
		}

		/// <summary>
		/// Asynchronously Inserts a single Beer into the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		public Task InsertBeerAsync(Beer beer)
		{
			return _connectionFactory().InsertAsync("InsertBeer", beer);
		}

		/// <summary>
		/// Asynchronously updates a single Beer in the repository.
		/// </summary>
		/// <param name="beer">The Beer to insert.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		public Task UpdateBeerAsync(Beer beer)
		{
			return _connectionFactory().ExecuteAsync("UpdateBeer", beer);
		}

		/// <summary>
		/// Asynchronously deletes a Beer in the repository matching the given identifier.
		/// </summary>
		/// <param name="id">The id of the Beer.</param>
		/// <returns>A task representing the completion of the operation.</returns>
		public Task DeleteBeerAsync(int id)
		{
			return _connectionFactory().ExecuteAsync("DeleteBeer", new { id = id });
		}
        #endregion
	}
}